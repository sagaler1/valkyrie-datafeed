// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: feed.proto
// Protobuf C++ Version: 5.29.5

#ifndef feed_2eproto_2epb_2eh
#define feed_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_feed_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_feed_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_feed_2eproto;
class PriceChange;
struct PriceChangeDefaultTypeInternal;
extern PriceChangeDefaultTypeInternal _PriceChange_default_instance_;
class StockData;
struct StockDataDefaultTypeInternal;
extern StockDataDefaultTypeInternal _StockData_default_instance_;
class StockFeed;
struct StockFeedDefaultTypeInternal;
extern StockFeedDefaultTypeInternal _StockFeed_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class PriceChange final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PriceChange) */ {
 public:
  inline PriceChange() : PriceChange(nullptr) {}
  ~PriceChange() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PriceChange* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PriceChange));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PriceChange(
      ::google::protobuf::internal::ConstantInitialized);

  inline PriceChange(const PriceChange& from) : PriceChange(nullptr, from) {}
  inline PriceChange(PriceChange&& from) noexcept
      : PriceChange(nullptr, std::move(from)) {}
  inline PriceChange& operator=(const PriceChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceChange& operator=(PriceChange&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceChange* internal_default_instance() {
    return reinterpret_cast<const PriceChange*>(
        &_PriceChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PriceChange& a, PriceChange& b) { a.Swap(&b); }
  inline void Swap(PriceChange* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceChange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceChange* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PriceChange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PriceChange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PriceChange& from) { PriceChange::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PriceChange* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "PriceChange"; }

 protected:
  explicit PriceChange(::google::protobuf::Arena* arena);
  PriceChange(::google::protobuf::Arena* arena, const PriceChange& from);
  PriceChange(::google::protobuf::Arena* arena, PriceChange&& from) noexcept
      : PriceChange(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
    kPercentageFieldNumber = 2,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // double percentage = 2;
  void clear_percentage() ;
  double percentage() const;
  void set_percentage(double value);

  private:
  double _internal_percentage() const;
  void _internal_set_percentage(double value);

  public:
  // @@protoc_insertion_point(class_scope:PriceChange)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PriceChange& from_msg);
    double value_;
    double percentage_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feed_2eproto;
};
// -------------------------------------------------------------------

class StockData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:StockData) */ {
 public:
  inline StockData() : StockData(nullptr) {}
  ~StockData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StockData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StockData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StockData(
      ::google::protobuf::internal::ConstantInitialized);

  inline StockData(const StockData& from) : StockData(nullptr, from) {}
  inline StockData(StockData&& from) noexcept
      : StockData(nullptr, std::move(from)) {}
  inline StockData& operator=(const StockData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockData& operator=(StockData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockData* internal_default_instance() {
    return reinterpret_cast<const StockData*>(
        &_StockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StockData& a, StockData& b) { a.Swap(&b); }
  inline void Swap(StockData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StockData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StockData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StockData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StockData& from) { StockData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StockData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "StockData"; }

 protected:
  explicit StockData(::google::protobuf::Arena* arena);
  StockData(::google::protobuf::Arena* arena, const StockData& from);
  StockData(::google::protobuf::Arena* arena, StockData&& from) noexcept
      : StockData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kDateFieldNumber = 10,
    kTimestampFieldNumber = 11,
    kOrderVerbFieldNumber = 16,
    kItchIncomingTimeFieldNumber = 26,
    kChangeFieldNumber = 15,
    kLastpriceFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kHighFieldNumber = 4,
    kLowFieldNumber = 5,
    kOpenFieldNumber = 6,
    kFrequencyFieldNumber = 7,
    kForeignbuyFieldNumber = 8,
    kForeignsellFieldNumber = 9,
    kCloseFieldNumber = 12,
    kPreviousFieldNumber = 13,
    kValueFieldNumber = 14,
    kQuantityFieldNumber = 17,
    kSequenceNumberFieldNumber = 19,
    kOrderBookIdFieldNumber = 20,
    kOrderNumberFieldNumber = 21,
    kMatchNumberFieldNumber = 22,
    kIsIndexFieldNumber = 18,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string date = 10;
  void clear_date() ;
  const std::string& date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* value);

  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(
      const std::string& value);
  std::string* _internal_mutable_date();

  public:
  // string timestamp = 11;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string order_verb = 16;
  void clear_order_verb() ;
  const std::string& order_verb() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_verb(Arg_&& arg, Args_... args);
  std::string* mutable_order_verb();
  PROTOBUF_NODISCARD std::string* release_order_verb();
  void set_allocated_order_verb(std::string* value);

  private:
  const std::string& _internal_order_verb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_verb(
      const std::string& value);
  std::string* _internal_mutable_order_verb();

  public:
  // string itch_incoming_time = 26;
  void clear_itch_incoming_time() ;
  const std::string& itch_incoming_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_itch_incoming_time(Arg_&& arg, Args_... args);
  std::string* mutable_itch_incoming_time();
  PROTOBUF_NODISCARD std::string* release_itch_incoming_time();
  void set_allocated_itch_incoming_time(std::string* value);

  private:
  const std::string& _internal_itch_incoming_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_itch_incoming_time(
      const std::string& value);
  std::string* _internal_mutable_itch_incoming_time();

  public:
  // .PriceChange change = 15;
  bool has_change() const;
  void clear_change() ;
  const ::PriceChange& change() const;
  PROTOBUF_NODISCARD ::PriceChange* release_change();
  ::PriceChange* mutable_change();
  void set_allocated_change(::PriceChange* value);
  void unsafe_arena_set_allocated_change(::PriceChange* value);
  ::PriceChange* unsafe_arena_release_change();

  private:
  const ::PriceChange& _internal_change() const;
  ::PriceChange* _internal_mutable_change();

  public:
  // double lastprice = 2;
  void clear_lastprice() ;
  double lastprice() const;
  void set_lastprice(double value);

  private:
  double _internal_lastprice() const;
  void _internal_set_lastprice(double value);

  public:
  // double volume = 3;
  void clear_volume() ;
  double volume() const;
  void set_volume(double value);

  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);

  public:
  // double high = 4;
  void clear_high() ;
  double high() const;
  void set_high(double value);

  private:
  double _internal_high() const;
  void _internal_set_high(double value);

  public:
  // double low = 5;
  void clear_low() ;
  double low() const;
  void set_low(double value);

  private:
  double _internal_low() const;
  void _internal_set_low(double value);

  public:
  // double open = 6;
  void clear_open() ;
  double open() const;
  void set_open(double value);

  private:
  double _internal_open() const;
  void _internal_set_open(double value);

  public:
  // double frequency = 7;
  void clear_frequency() ;
  double frequency() const;
  void set_frequency(double value);

  private:
  double _internal_frequency() const;
  void _internal_set_frequency(double value);

  public:
  // double foreignbuy = 8;
  void clear_foreignbuy() ;
  double foreignbuy() const;
  void set_foreignbuy(double value);

  private:
  double _internal_foreignbuy() const;
  void _internal_set_foreignbuy(double value);

  public:
  // double foreignsell = 9;
  void clear_foreignsell() ;
  double foreignsell() const;
  void set_foreignsell(double value);

  private:
  double _internal_foreignsell() const;
  void _internal_set_foreignsell(double value);

  public:
  // double close = 12;
  void clear_close() ;
  double close() const;
  void set_close(double value);

  private:
  double _internal_close() const;
  void _internal_set_close(double value);

  public:
  // double previous = 13;
  void clear_previous() ;
  double previous() const;
  void set_previous(double value);

  private:
  double _internal_previous() const;
  void _internal_set_previous(double value);

  public:
  // double value = 14;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // int64 quantity = 17;
  void clear_quantity() ;
  ::int64_t quantity() const;
  void set_quantity(::int64_t value);

  private:
  ::int64_t _internal_quantity() const;
  void _internal_set_quantity(::int64_t value);

  public:
  // int64 sequence_number = 19;
  void clear_sequence_number() ;
  ::int64_t sequence_number() const;
  void set_sequence_number(::int64_t value);

  private:
  ::int64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(::int64_t value);

  public:
  // int64 order_book_id = 20;
  void clear_order_book_id() ;
  ::int64_t order_book_id() const;
  void set_order_book_id(::int64_t value);

  private:
  ::int64_t _internal_order_book_id() const;
  void _internal_set_order_book_id(::int64_t value);

  public:
  // int64 order_number = 21;
  void clear_order_number() ;
  ::int64_t order_number() const;
  void set_order_number(::int64_t value);

  private:
  ::int64_t _internal_order_number() const;
  void _internal_set_order_number(::int64_t value);

  public:
  // int64 match_number = 22;
  void clear_match_number() ;
  ::int64_t match_number() const;
  void set_match_number(::int64_t value);

  private:
  ::int64_t _internal_match_number() const;
  void _internal_set_match_number(::int64_t value);

  public:
  // bool is_index = 18;
  void clear_is_index() ;
  bool is_index() const;
  void set_is_index(bool value);

  private:
  bool _internal_is_index() const;
  void _internal_set_is_index(bool value);

  public:
  // @@protoc_insertion_point(class_scope:StockData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 23, 1,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StockData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr order_verb_;
    ::google::protobuf::internal::ArenaStringPtr itch_incoming_time_;
    ::PriceChange* change_;
    double lastprice_;
    double volume_;
    double high_;
    double low_;
    double open_;
    double frequency_;
    double foreignbuy_;
    double foreignsell_;
    double close_;
    double previous_;
    double value_;
    ::int64_t quantity_;
    ::int64_t sequence_number_;
    ::int64_t order_book_id_;
    ::int64_t order_number_;
    ::int64_t match_number_;
    bool is_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feed_2eproto;
};
// -------------------------------------------------------------------

class StockFeed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:StockFeed) */ {
 public:
  inline StockFeed() : StockFeed(nullptr) {}
  ~StockFeed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StockFeed* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StockFeed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StockFeed(
      ::google::protobuf::internal::ConstantInitialized);

  inline StockFeed(const StockFeed& from) : StockFeed(nullptr, from) {}
  inline StockFeed(StockFeed&& from) noexcept
      : StockFeed(nullptr, std::move(from)) {}
  inline StockFeed& operator=(const StockFeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockFeed& operator=(StockFeed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockFeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockFeed* internal_default_instance() {
    return reinterpret_cast<const StockFeed*>(
        &_StockFeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StockFeed& a, StockFeed& b) { a.Swap(&b); }
  inline void Swap(StockFeed* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockFeed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StockFeed* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StockFeed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StockFeed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StockFeed& from) { StockFeed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StockFeed* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "StockFeed"; }

 protected:
  explicit StockFeed(::google::protobuf::Arena* arena);
  StockFeed(::google::protobuf::Arena* arena, const StockFeed& from);
  StockFeed(::google::protobuf::Arena* arena, StockFeed&& from) noexcept
      : StockFeed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStockDataFieldNumber = 9,
  };
  // .StockData stock_data = 9;
  bool has_stock_data() const;
  void clear_stock_data() ;
  const ::StockData& stock_data() const;
  PROTOBUF_NODISCARD ::StockData* release_stock_data();
  ::StockData* mutable_stock_data();
  void set_allocated_stock_data(::StockData* value);
  void unsafe_arena_set_allocated_stock_data(::StockData* value);
  ::StockData* unsafe_arena_release_stock_data();

  private:
  const ::StockData& _internal_stock_data() const;
  ::StockData* _internal_mutable_stock_data();

  public:
  // @@protoc_insertion_point(class_scope:StockFeed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StockFeed& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::StockData* stock_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feed_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StockFeed

// .StockData stock_data = 9;
inline bool StockFeed::has_stock_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stock_data_ != nullptr);
  return value;
}
inline void StockFeed::clear_stock_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stock_data_ != nullptr) _impl_.stock_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::StockData& StockFeed::_internal_stock_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::StockData* p = _impl_.stock_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::StockData&>(::_StockData_default_instance_);
}
inline const ::StockData& StockFeed::stock_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StockFeed.stock_data)
  return _internal_stock_data();
}
inline void StockFeed::unsafe_arena_set_allocated_stock_data(::StockData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stock_data_);
  }
  _impl_.stock_data_ = reinterpret_cast<::StockData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StockFeed.stock_data)
}
inline ::StockData* StockFeed::release_stock_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StockData* released = _impl_.stock_data_;
  _impl_.stock_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::StockData* StockFeed::unsafe_arena_release_stock_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StockFeed.stock_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::StockData* temp = _impl_.stock_data_;
  _impl_.stock_data_ = nullptr;
  return temp;
}
inline ::StockData* StockFeed::_internal_mutable_stock_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stock_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::StockData>(GetArena());
    _impl_.stock_data_ = reinterpret_cast<::StockData*>(p);
  }
  return _impl_.stock_data_;
}
inline ::StockData* StockFeed::mutable_stock_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::StockData* _msg = _internal_mutable_stock_data();
  // @@protoc_insertion_point(field_mutable:StockFeed.stock_data)
  return _msg;
}
inline void StockFeed::set_allocated_stock_data(::StockData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.stock_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stock_data_ = reinterpret_cast<::StockData*>(value);
  // @@protoc_insertion_point(field_set_allocated:StockFeed.stock_data)
}

// -------------------------------------------------------------------

// StockData

// string symbol = 1;
inline void StockData::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& StockData::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StockData.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StockData::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StockData.symbol)
}
inline std::string* StockData::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:StockData.symbol)
  return _s;
}
inline const std::string& StockData::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void StockData::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* StockData::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* StockData::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StockData.symbol)
  return _impl_.symbol_.Release();
}
inline void StockData::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:StockData.symbol)
}

// double lastprice = 2;
inline void StockData::clear_lastprice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastprice_ = 0;
}
inline double StockData::lastprice() const {
  // @@protoc_insertion_point(field_get:StockData.lastprice)
  return _internal_lastprice();
}
inline void StockData::set_lastprice(double value) {
  _internal_set_lastprice(value);
  // @@protoc_insertion_point(field_set:StockData.lastprice)
}
inline double StockData::_internal_lastprice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lastprice_;
}
inline void StockData::_internal_set_lastprice(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lastprice_ = value;
}

// double volume = 3;
inline void StockData::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = 0;
}
inline double StockData::volume() const {
  // @@protoc_insertion_point(field_get:StockData.volume)
  return _internal_volume();
}
inline void StockData::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:StockData.volume)
}
inline double StockData::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void StockData::_internal_set_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// double high = 4;
inline void StockData::clear_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = 0;
}
inline double StockData::high() const {
  // @@protoc_insertion_point(field_get:StockData.high)
  return _internal_high();
}
inline void StockData::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:StockData.high)
}
inline double StockData::_internal_high() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.high_;
}
inline void StockData::_internal_set_high(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = value;
}

// double low = 5;
inline void StockData::clear_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = 0;
}
inline double StockData::low() const {
  // @@protoc_insertion_point(field_get:StockData.low)
  return _internal_low();
}
inline void StockData::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:StockData.low)
}
inline double StockData::_internal_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.low_;
}
inline void StockData::_internal_set_low(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = value;
}

// double open = 6;
inline void StockData::clear_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = 0;
}
inline double StockData::open() const {
  // @@protoc_insertion_point(field_get:StockData.open)
  return _internal_open();
}
inline void StockData::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:StockData.open)
}
inline double StockData::_internal_open() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.open_;
}
inline void StockData::_internal_set_open(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = value;
}

// double frequency = 7;
inline void StockData::clear_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frequency_ = 0;
}
inline double StockData::frequency() const {
  // @@protoc_insertion_point(field_get:StockData.frequency)
  return _internal_frequency();
}
inline void StockData::set_frequency(double value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:StockData.frequency)
}
inline double StockData::_internal_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frequency_;
}
inline void StockData::_internal_set_frequency(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frequency_ = value;
}

// double foreignbuy = 8;
inline void StockData::clear_foreignbuy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foreignbuy_ = 0;
}
inline double StockData::foreignbuy() const {
  // @@protoc_insertion_point(field_get:StockData.foreignbuy)
  return _internal_foreignbuy();
}
inline void StockData::set_foreignbuy(double value) {
  _internal_set_foreignbuy(value);
  // @@protoc_insertion_point(field_set:StockData.foreignbuy)
}
inline double StockData::_internal_foreignbuy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.foreignbuy_;
}
inline void StockData::_internal_set_foreignbuy(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foreignbuy_ = value;
}

// double foreignsell = 9;
inline void StockData::clear_foreignsell() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foreignsell_ = 0;
}
inline double StockData::foreignsell() const {
  // @@protoc_insertion_point(field_get:StockData.foreignsell)
  return _internal_foreignsell();
}
inline void StockData::set_foreignsell(double value) {
  _internal_set_foreignsell(value);
  // @@protoc_insertion_point(field_set:StockData.foreignsell)
}
inline double StockData::_internal_foreignsell() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.foreignsell_;
}
inline void StockData::_internal_set_foreignsell(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foreignsell_ = value;
}

// string date = 10;
inline void StockData::clear_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.ClearToEmpty();
}
inline const std::string& StockData::date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StockData.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StockData::set_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StockData.date)
}
inline std::string* StockData::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:StockData.date)
  return _s;
}
inline const std::string& StockData::_internal_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_.Get();
}
inline void StockData::_internal_set_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.Set(value, GetArena());
}
inline std::string* StockData::_internal_mutable_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_.Mutable( GetArena());
}
inline std::string* StockData::release_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StockData.date)
  return _impl_.date_.Release();
}
inline void StockData::set_allocated_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:StockData.date)
}

// string timestamp = 11;
inline void StockData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& StockData::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StockData.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StockData::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StockData.timestamp)
}
inline std::string* StockData::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:StockData.timestamp)
  return _s;
}
inline const std::string& StockData::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void StockData::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* StockData::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* StockData::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StockData.timestamp)
  return _impl_.timestamp_.Release();
}
inline void StockData::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:StockData.timestamp)
}

// double close = 12;
inline void StockData::clear_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = 0;
}
inline double StockData::close() const {
  // @@protoc_insertion_point(field_get:StockData.close)
  return _internal_close();
}
inline void StockData::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:StockData.close)
}
inline double StockData::_internal_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_;
}
inline void StockData::_internal_set_close(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = value;
}

// double previous = 13;
inline void StockData::clear_previous() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_ = 0;
}
inline double StockData::previous() const {
  // @@protoc_insertion_point(field_get:StockData.previous)
  return _internal_previous();
}
inline void StockData::set_previous(double value) {
  _internal_set_previous(value);
  // @@protoc_insertion_point(field_set:StockData.previous)
}
inline double StockData::_internal_previous() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.previous_;
}
inline void StockData::_internal_set_previous(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_ = value;
}

// double value = 14;
inline void StockData::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double StockData::value() const {
  // @@protoc_insertion_point(field_get:StockData.value)
  return _internal_value();
}
inline void StockData::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:StockData.value)
}
inline double StockData::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void StockData::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// .PriceChange change = 15;
inline bool StockData::has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline void StockData::clear_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PriceChange& StockData::_internal_change() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::PriceChange* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::PriceChange&>(::_PriceChange_default_instance_);
}
inline const ::PriceChange& StockData::change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StockData.change)
  return _internal_change();
}
inline void StockData::unsafe_arena_set_allocated_change(::PriceChange* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = reinterpret_cast<::PriceChange*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StockData.change)
}
inline ::PriceChange* StockData::release_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PriceChange* released = _impl_.change_;
  _impl_.change_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::PriceChange* StockData::unsafe_arena_release_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StockData.change)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PriceChange* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::PriceChange* StockData::_internal_mutable_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.change_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::PriceChange>(GetArena());
    _impl_.change_ = reinterpret_cast<::PriceChange*>(p);
  }
  return _impl_.change_;
}
inline ::PriceChange* StockData::mutable_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::PriceChange* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:StockData.change)
  return _msg;
}
inline void StockData::set_allocated_change(::PriceChange* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.change_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.change_ = reinterpret_cast<::PriceChange*>(value);
  // @@protoc_insertion_point(field_set_allocated:StockData.change)
}

// string order_verb = 16;
inline void StockData::clear_order_verb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_verb_.ClearToEmpty();
}
inline const std::string& StockData::order_verb() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StockData.order_verb)
  return _internal_order_verb();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StockData::set_order_verb(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_verb_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StockData.order_verb)
}
inline std::string* StockData::mutable_order_verb() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_verb();
  // @@protoc_insertion_point(field_mutable:StockData.order_verb)
  return _s;
}
inline const std::string& StockData::_internal_order_verb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_verb_.Get();
}
inline void StockData::_internal_set_order_verb(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_verb_.Set(value, GetArena());
}
inline std::string* StockData::_internal_mutable_order_verb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_verb_.Mutable( GetArena());
}
inline std::string* StockData::release_order_verb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StockData.order_verb)
  return _impl_.order_verb_.Release();
}
inline void StockData::set_allocated_order_verb(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_verb_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_verb_.IsDefault()) {
    _impl_.order_verb_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:StockData.order_verb)
}

// int64 quantity = 17;
inline void StockData::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t StockData::quantity() const {
  // @@protoc_insertion_point(field_get:StockData.quantity)
  return _internal_quantity();
}
inline void StockData::set_quantity(::int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:StockData.quantity)
}
inline ::int64_t StockData::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void StockData::_internal_set_quantity(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// bool is_index = 18;
inline void StockData::clear_is_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_index_ = false;
}
inline bool StockData::is_index() const {
  // @@protoc_insertion_point(field_get:StockData.is_index)
  return _internal_is_index();
}
inline void StockData::set_is_index(bool value) {
  _internal_set_is_index(value);
  // @@protoc_insertion_point(field_set:StockData.is_index)
}
inline bool StockData::_internal_is_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_index_;
}
inline void StockData::_internal_set_is_index(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_index_ = value;
}

// int64 sequence_number = 19;
inline void StockData::clear_sequence_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = ::int64_t{0};
}
inline ::int64_t StockData::sequence_number() const {
  // @@protoc_insertion_point(field_get:StockData.sequence_number)
  return _internal_sequence_number();
}
inline void StockData::set_sequence_number(::int64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:StockData.sequence_number)
}
inline ::int64_t StockData::_internal_sequence_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_number_;
}
inline void StockData::_internal_set_sequence_number(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = value;
}

// int64 order_book_id = 20;
inline void StockData::clear_order_book_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_id_ = ::int64_t{0};
}
inline ::int64_t StockData::order_book_id() const {
  // @@protoc_insertion_point(field_get:StockData.order_book_id)
  return _internal_order_book_id();
}
inline void StockData::set_order_book_id(::int64_t value) {
  _internal_set_order_book_id(value);
  // @@protoc_insertion_point(field_set:StockData.order_book_id)
}
inline ::int64_t StockData::_internal_order_book_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_book_id_;
}
inline void StockData::_internal_set_order_book_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_id_ = value;
}

// int64 order_number = 21;
inline void StockData::clear_order_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_number_ = ::int64_t{0};
}
inline ::int64_t StockData::order_number() const {
  // @@protoc_insertion_point(field_get:StockData.order_number)
  return _internal_order_number();
}
inline void StockData::set_order_number(::int64_t value) {
  _internal_set_order_number(value);
  // @@protoc_insertion_point(field_set:StockData.order_number)
}
inline ::int64_t StockData::_internal_order_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_number_;
}
inline void StockData::_internal_set_order_number(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_number_ = value;
}

// int64 match_number = 22;
inline void StockData::clear_match_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.match_number_ = ::int64_t{0};
}
inline ::int64_t StockData::match_number() const {
  // @@protoc_insertion_point(field_get:StockData.match_number)
  return _internal_match_number();
}
inline void StockData::set_match_number(::int64_t value) {
  _internal_set_match_number(value);
  // @@protoc_insertion_point(field_set:StockData.match_number)
}
inline ::int64_t StockData::_internal_match_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.match_number_;
}
inline void StockData::_internal_set_match_number(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.match_number_ = value;
}

// string itch_incoming_time = 26;
inline void StockData::clear_itch_incoming_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itch_incoming_time_.ClearToEmpty();
}
inline const std::string& StockData::itch_incoming_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:StockData.itch_incoming_time)
  return _internal_itch_incoming_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StockData::set_itch_incoming_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itch_incoming_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:StockData.itch_incoming_time)
}
inline std::string* StockData::mutable_itch_incoming_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_itch_incoming_time();
  // @@protoc_insertion_point(field_mutable:StockData.itch_incoming_time)
  return _s;
}
inline const std::string& StockData::_internal_itch_incoming_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.itch_incoming_time_.Get();
}
inline void StockData::_internal_set_itch_incoming_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itch_incoming_time_.Set(value, GetArena());
}
inline std::string* StockData::_internal_mutable_itch_incoming_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.itch_incoming_time_.Mutable( GetArena());
}
inline std::string* StockData::release_itch_incoming_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:StockData.itch_incoming_time)
  return _impl_.itch_incoming_time_.Release();
}
inline void StockData::set_allocated_itch_incoming_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.itch_incoming_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.itch_incoming_time_.IsDefault()) {
    _impl_.itch_incoming_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:StockData.itch_incoming_time)
}

// -------------------------------------------------------------------

// PriceChange

// double value = 1;
inline void PriceChange::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double PriceChange::value() const {
  // @@protoc_insertion_point(field_get:PriceChange.value)
  return _internal_value();
}
inline void PriceChange::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PriceChange.value)
}
inline double PriceChange::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void PriceChange::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// double percentage = 2;
inline void PriceChange::clear_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = 0;
}
inline double PriceChange::percentage() const {
  // @@protoc_insertion_point(field_get:PriceChange.percentage)
  return _internal_percentage();
}
inline void PriceChange::set_percentage(double value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:PriceChange.percentage)
}
inline double PriceChange::_internal_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.percentage_;
}
inline void PriceChange::_internal_set_percentage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // feed_2eproto_2epb_2eh
