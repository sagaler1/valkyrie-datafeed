// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: subscribe.proto
// Protobuf C++ Version: 5.29.5

#include "subscribe.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr LiveFeedSub::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : livequote_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LiveFeedSub::LiveFeedSub(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LiveFeedSubDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveFeedSubDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveFeedSubDefaultTypeInternal() {}
  union {
    LiveFeedSub _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveFeedSubDefaultTypeInternal _LiveFeedSub_default_instance_;

inline constexpr SymbolSubscribe::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        userid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subs_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SymbolSubscribe::SymbolSubscribe(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SymbolSubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolSubscribeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolSubscribeDefaultTypeInternal() {}
  union {
    SymbolSubscribe _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolSubscribeDefaultTypeInternal _SymbolSubscribe_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_subscribe_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_subscribe_2eproto = nullptr;
const ::uint32_t
    TableStruct_subscribe_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::LiveFeedSub, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::LiveFeedSub, _impl_.livequote_),
        PROTOBUF_FIELD_OFFSET(::SymbolSubscribe, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SymbolSubscribe, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SymbolSubscribe, _impl_.userid_),
        PROTOBUF_FIELD_OFFSET(::SymbolSubscribe, _impl_.subs_),
        PROTOBUF_FIELD_OFFSET(::SymbolSubscribe, _impl_.key_),
        ~0u,
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::LiveFeedSub)},
        {9, 20, -1, sizeof(::SymbolSubscribe)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_LiveFeedSub_default_instance_._instance,
    &::_SymbolSubscribe_default_instance_._instance,
};
const char descriptor_table_protodef_subscribe_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017subscribe.proto\" \n\013LiveFeedSub\022\021\n\tlive"
    "quote\030\006 \003(\t\"J\n\017SymbolSubscribe\022\016\n\006userId"
    "\030\001 \001(\t\022\032\n\004subs\030\002 \001(\0132\014.LiveFeedSub\022\013\n\003ke"
    "y\030\003 \001(\tb\006proto3"
};
static ::absl::once_flag descriptor_table_subscribe_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_subscribe_2eproto = {
    false,
    false,
    135,
    descriptor_table_protodef_subscribe_2eproto,
    "subscribe.proto",
    &descriptor_table_subscribe_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_subscribe_2eproto::offsets,
    file_level_enum_descriptors_subscribe_2eproto,
    file_level_service_descriptors_subscribe_2eproto,
};
// ===================================================================

class LiveFeedSub::_Internal {
 public:
};

LiveFeedSub::LiveFeedSub(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LiveFeedSub)
}
inline PROTOBUF_NDEBUG_INLINE LiveFeedSub::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::LiveFeedSub& from_msg)
      : livequote_{visibility, arena, from.livequote_},
        _cached_size_{0} {}

LiveFeedSub::LiveFeedSub(
    ::google::protobuf::Arena* arena,
    const LiveFeedSub& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LiveFeedSub* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:LiveFeedSub)
}
inline PROTOBUF_NDEBUG_INLINE LiveFeedSub::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : livequote_{visibility, arena},
        _cached_size_{0} {}

inline void LiveFeedSub::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LiveFeedSub::~LiveFeedSub() {
  // @@protoc_insertion_point(destructor:LiveFeedSub)
  SharedDtor(*this);
}
inline void LiveFeedSub::SharedDtor(MessageLite& self) {
  LiveFeedSub& this_ = static_cast<LiveFeedSub&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* LiveFeedSub::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LiveFeedSub(arena);
}
constexpr auto LiveFeedSub::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LiveFeedSub, _impl_.livequote_) +
          decltype(LiveFeedSub::_impl_.livequote_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LiveFeedSub), alignof(LiveFeedSub), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LiveFeedSub::PlacementNew_,
                                 sizeof(LiveFeedSub),
                                 alignof(LiveFeedSub));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LiveFeedSub::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LiveFeedSub_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LiveFeedSub::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LiveFeedSub>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LiveFeedSub::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LiveFeedSub>(), &LiveFeedSub::ByteSizeLong,
            &LiveFeedSub::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LiveFeedSub, _impl_._cached_size_),
        false,
    },
    &LiveFeedSub::kDescriptorMethods,
    &descriptor_table_subscribe_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LiveFeedSub::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 29, 2> LiveFeedSub::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967263,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::LiveFeedSub>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string livequote = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(LiveFeedSub, _impl_.livequote_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string livequote = 6;
    {PROTOBUF_FIELD_OFFSET(LiveFeedSub, _impl_.livequote_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\13\11\0\0\0\0\0\0"
    "LiveFeedSub"
    "livequote"
  }},
};

PROTOBUF_NOINLINE void LiveFeedSub::Clear() {
// @@protoc_insertion_point(message_clear_start:LiveFeedSub)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.livequote_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LiveFeedSub::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LiveFeedSub& this_ = static_cast<const LiveFeedSub&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LiveFeedSub::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LiveFeedSub& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:LiveFeedSub)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string livequote = 6;
          for (int i = 0, n = this_._internal_livequote_size(); i < n; ++i) {
            const auto& s = this_._internal_livequote().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "LiveFeedSub.livequote");
            target = stream->WriteString(6, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:LiveFeedSub)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LiveFeedSub::ByteSizeLong(const MessageLite& base) {
          const LiveFeedSub& this_ = static_cast<const LiveFeedSub&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LiveFeedSub::ByteSizeLong() const {
          const LiveFeedSub& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:LiveFeedSub)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string livequote = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_livequote().size());
              for (int i = 0, n = this_._internal_livequote().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_livequote().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LiveFeedSub::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LiveFeedSub*>(&to_msg);
  auto& from = static_cast<const LiveFeedSub&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LiveFeedSub)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_livequote()->MergeFrom(from._internal_livequote());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LiveFeedSub::CopyFrom(const LiveFeedSub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiveFeedSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LiveFeedSub::InternalSwap(LiveFeedSub* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.livequote_.InternalSwap(&other->_impl_.livequote_);
}

::google::protobuf::Metadata LiveFeedSub::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SymbolSubscribe::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SymbolSubscribe>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_._has_bits_);
};

SymbolSubscribe::SymbolSubscribe(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SymbolSubscribe)
}
inline PROTOBUF_NDEBUG_INLINE SymbolSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SymbolSubscribe& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        userid_(arena, from.userid_),
        key_(arena, from.key_) {}

SymbolSubscribe::SymbolSubscribe(
    ::google::protobuf::Arena* arena,
    const SymbolSubscribe& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SymbolSubscribe* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.subs_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::LiveFeedSub>(
                              arena, *from._impl_.subs_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:SymbolSubscribe)
}
inline PROTOBUF_NDEBUG_INLINE SymbolSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        userid_(arena),
        key_(arena) {}

inline void SymbolSubscribe::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subs_ = {};
}
SymbolSubscribe::~SymbolSubscribe() {
  // @@protoc_insertion_point(destructor:SymbolSubscribe)
  SharedDtor(*this);
}
inline void SymbolSubscribe::SharedDtor(MessageLite& self) {
  SymbolSubscribe& this_ = static_cast<SymbolSubscribe&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.userid_.Destroy();
  this_._impl_.key_.Destroy();
  delete this_._impl_.subs_;
  this_._impl_.~Impl_();
}

inline void* SymbolSubscribe::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SymbolSubscribe(arena);
}
constexpr auto SymbolSubscribe::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SymbolSubscribe),
                                            alignof(SymbolSubscribe));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SymbolSubscribe::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SymbolSubscribe_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SymbolSubscribe::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SymbolSubscribe>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SymbolSubscribe::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SymbolSubscribe>(), &SymbolSubscribe::ByteSizeLong,
            &SymbolSubscribe::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_._cached_size_),
        false,
    },
    &SymbolSubscribe::kDescriptorMethods,
    &descriptor_table_subscribe_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SymbolSubscribe::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 33, 2> SymbolSubscribe::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SymbolSubscribe>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string userId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_.userid_)}},
    // .LiveFeedSub subs = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_.subs_)}},
    // string key = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string userId = 1;
    {PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_.userid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .LiveFeedSub subs = 2;
    {PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_.subs_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string key = 3;
    {PROTOBUF_FIELD_OFFSET(SymbolSubscribe, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::LiveFeedSub>()},
  }}, {{
    "\17\6\0\3\0\0\0\0"
    "SymbolSubscribe"
    "userId"
    "key"
  }},
};

PROTOBUF_NOINLINE void SymbolSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:SymbolSubscribe)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subs_ != nullptr);
    _impl_.subs_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SymbolSubscribe::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SymbolSubscribe& this_ = static_cast<const SymbolSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SymbolSubscribe::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SymbolSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SymbolSubscribe)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string userId = 1;
          if (!this_._internal_userid().empty()) {
            const std::string& _s = this_._internal_userid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SymbolSubscribe.userId");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .LiveFeedSub subs = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.subs_, this_._impl_.subs_->GetCachedSize(), target,
                stream);
          }

          // string key = 3;
          if (!this_._internal_key().empty()) {
            const std::string& _s = this_._internal_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SymbolSubscribe.key");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SymbolSubscribe)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SymbolSubscribe::ByteSizeLong(const MessageLite& base) {
          const SymbolSubscribe& this_ = static_cast<const SymbolSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SymbolSubscribe::ByteSizeLong() const {
          const SymbolSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SymbolSubscribe)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string userId = 1;
            if (!this_._internal_userid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_userid());
            }
            // string key = 3;
            if (!this_._internal_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_key());
            }
          }
           {
            // .LiveFeedSub subs = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.subs_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SymbolSubscribe::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SymbolSubscribe*>(&to_msg);
  auto& from = static_cast<const SymbolSubscribe&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:SymbolSubscribe)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.subs_ != nullptr);
    if (_this->_impl_.subs_ == nullptr) {
      _this->_impl_.subs_ =
          ::google::protobuf::Message::CopyConstruct<::LiveFeedSub>(arena, *from._impl_.subs_);
    } else {
      _this->_impl_.subs_->MergeFrom(*from._impl_.subs_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolSubscribe::CopyFrom(const SymbolSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SymbolSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SymbolSubscribe::InternalSwap(SymbolSubscribe* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, &other->_impl_.userid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  swap(_impl_.subs_, other->_impl_.subs_);
}

::google::protobuf::Metadata SymbolSubscribe::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_subscribe_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
