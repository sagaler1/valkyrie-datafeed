// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: feed.proto
// Protobuf C++ Version: 5.29.5

#include "feed.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr PriceChange::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0},
        percentage_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PriceChange::PriceChange(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PriceChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceChangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceChangeDefaultTypeInternal() {}
  union {
    PriceChange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceChangeDefaultTypeInternal _PriceChange_default_instance_;

inline constexpr StockData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        date_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        order_verb_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        itch_incoming_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        change_{nullptr},
        lastprice_{0},
        volume_{0},
        high_{0},
        low_{0},
        open_{0},
        frequency_{0},
        foreignbuy_{0},
        foreignsell_{0},
        close_{0},
        previous_{0},
        value_{0},
        quantity_{::int64_t{0}},
        sequence_number_{::int64_t{0}},
        order_book_id_{::int64_t{0}},
        order_number_{::int64_t{0}},
        match_number_{::int64_t{0}},
        is_index_{false} {}

template <typename>
PROTOBUF_CONSTEXPR StockData::StockData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StockDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StockDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StockDataDefaultTypeInternal() {}
  union {
    StockData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StockDataDefaultTypeInternal _StockData_default_instance_;

inline constexpr StockFeed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        stock_data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StockFeed::StockFeed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StockFeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StockFeedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StockFeedDefaultTypeInternal() {}
  union {
    StockFeed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StockFeedDefaultTypeInternal _StockFeed_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_feed_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_feed_2eproto = nullptr;
const ::uint32_t
    TableStruct_feed_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::StockFeed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::StockFeed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::StockFeed, _impl_.stock_data_),
        0,
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::StockData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.lastprice_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.high_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.open_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.frequency_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.foreignbuy_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.foreignsell_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.date_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.close_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.previous_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.change_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.order_verb_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.quantity_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.is_index_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.sequence_number_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.order_book_id_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.order_number_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.match_number_),
        PROTOBUF_FIELD_OFFSET(::StockData, _impl_.itch_incoming_time_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::PriceChange, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::PriceChange, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::PriceChange, _impl_.percentage_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::StockFeed)},
        {10, 41, -1, sizeof(::StockData)},
        {64, -1, -1, sizeof(::PriceChange)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_StockFeed_default_instance_._instance,
    &::_StockData_default_instance_._instance,
    &::_PriceChange_default_instance_._instance,
};
const char descriptor_table_protodef_feed_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\nfeed.proto\"1\n\tStockFeed\022\036\n\nstock_data\030"
    "\t \001(\0132\n.StockDataJ\004\010\001\020\t\"\302\003\n\tStockData\022\016\n"
    "\006symbol\030\001 \001(\t\022\021\n\tlastprice\030\002 \001(\001\022\016\n\006volu"
    "me\030\003 \001(\001\022\014\n\004high\030\004 \001(\001\022\013\n\003low\030\005 \001(\001\022\014\n\004o"
    "pen\030\006 \001(\001\022\021\n\tfrequency\030\007 \001(\001\022\022\n\nforeignb"
    "uy\030\010 \001(\001\022\023\n\013foreignsell\030\t \001(\001\022\014\n\004date\030\n "
    "\001(\t\022\021\n\ttimestamp\030\013 \001(\t\022\r\n\005close\030\014 \001(\001\022\020\n"
    "\010previous\030\r \001(\001\022\r\n\005value\030\016 \001(\001\022\034\n\006change"
    "\030\017 \001(\0132\014.PriceChange\022\022\n\norder_verb\030\020 \001(\t"
    "\022\020\n\010quantity\030\021 \001(\003\022\020\n\010is_index\030\022 \001(\010\022\027\n\017"
    "sequence_number\030\023 \001(\003\022\025\n\rorder_book_id\030\024"
    " \001(\003\022\024\n\014order_number\030\025 \001(\003\022\024\n\014match_numb"
    "er\030\026 \001(\003\022\032\n\022itch_incoming_time\030\032 \001(\t\"0\n\013"
    "PriceChange\022\r\n\005value\030\001 \001(\001\022\022\n\npercentage"
    "\030\002 \001(\001b\006proto3"
};
static ::absl::once_flag descriptor_table_feed_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_feed_2eproto = {
    false,
    false,
    574,
    descriptor_table_protodef_feed_2eproto,
    "feed.proto",
    &descriptor_table_feed_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_feed_2eproto::offsets,
    file_level_enum_descriptors_feed_2eproto,
    file_level_service_descriptors_feed_2eproto,
};
// ===================================================================

class StockFeed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StockFeed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StockFeed, _impl_._has_bits_);
};

StockFeed::StockFeed(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:StockFeed)
}
inline PROTOBUF_NDEBUG_INLINE StockFeed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::StockFeed& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StockFeed::StockFeed(
    ::google::protobuf::Arena* arena,
    const StockFeed& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StockFeed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.stock_data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::StockData>(
                              arena, *from._impl_.stock_data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:StockFeed)
}
inline PROTOBUF_NDEBUG_INLINE StockFeed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StockFeed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stock_data_ = {};
}
StockFeed::~StockFeed() {
  // @@protoc_insertion_point(destructor:StockFeed)
  SharedDtor(*this);
}
inline void StockFeed::SharedDtor(MessageLite& self) {
  StockFeed& this_ = static_cast<StockFeed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.stock_data_;
  this_._impl_.~Impl_();
}

inline void* StockFeed::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StockFeed(arena);
}
constexpr auto StockFeed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(StockFeed),
                                            alignof(StockFeed));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StockFeed::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StockFeed_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StockFeed::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StockFeed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StockFeed::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StockFeed>(), &StockFeed::ByteSizeLong,
            &StockFeed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StockFeed, _impl_._cached_size_),
        false,
    },
    &StockFeed::kDescriptorMethods,
    &descriptor_table_feed_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StockFeed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StockFeed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StockFeed, _impl_._has_bits_),
    0, // no _extensions_
    9, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967039,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::StockFeed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .StockData stock_data = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(StockFeed, _impl_.stock_data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .StockData stock_data = 9;
    {PROTOBUF_FIELD_OFFSET(StockFeed, _impl_.stock_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::StockData>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void StockFeed::Clear() {
// @@protoc_insertion_point(message_clear_start:StockFeed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.stock_data_ != nullptr);
    _impl_.stock_data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StockFeed::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StockFeed& this_ = static_cast<const StockFeed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StockFeed::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StockFeed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:StockFeed)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .StockData stock_data = 9;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.stock_data_, this_._impl_.stock_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:StockFeed)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StockFeed::ByteSizeLong(const MessageLite& base) {
          const StockFeed& this_ = static_cast<const StockFeed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StockFeed::ByteSizeLong() const {
          const StockFeed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:StockFeed)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .StockData stock_data = 9;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.stock_data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StockFeed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StockFeed*>(&to_msg);
  auto& from = static_cast<const StockFeed&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:StockFeed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.stock_data_ != nullptr);
    if (_this->_impl_.stock_data_ == nullptr) {
      _this->_impl_.stock_data_ =
          ::google::protobuf::Message::CopyConstruct<::StockData>(arena, *from._impl_.stock_data_);
    } else {
      _this->_impl_.stock_data_->MergeFrom(*from._impl_.stock_data_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StockFeed::CopyFrom(const StockFeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StockFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StockFeed::InternalSwap(StockFeed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stock_data_, other->_impl_.stock_data_);
}

::google::protobuf::Metadata StockFeed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StockData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StockData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StockData, _impl_._has_bits_);
};

StockData::StockData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:StockData)
}
inline PROTOBUF_NDEBUG_INLINE StockData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::StockData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_),
        date_(arena, from.date_),
        timestamp_(arena, from.timestamp_),
        order_verb_(arena, from.order_verb_),
        itch_incoming_time_(arena, from.itch_incoming_time_) {}

StockData::StockData(
    ::google::protobuf::Arena* arena,
    const StockData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StockData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.change_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::PriceChange>(
                              arena, *from._impl_.change_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lastprice_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lastprice_),
           offsetof(Impl_, is_index_) -
               offsetof(Impl_, lastprice_) +
               sizeof(Impl_::is_index_));

  // @@protoc_insertion_point(copy_constructor:StockData)
}
inline PROTOBUF_NDEBUG_INLINE StockData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        symbol_(arena),
        date_(arena),
        timestamp_(arena),
        order_verb_(arena),
        itch_incoming_time_(arena) {}

inline void StockData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, change_),
           0,
           offsetof(Impl_, is_index_) -
               offsetof(Impl_, change_) +
               sizeof(Impl_::is_index_));
}
StockData::~StockData() {
  // @@protoc_insertion_point(destructor:StockData)
  SharedDtor(*this);
}
inline void StockData::SharedDtor(MessageLite& self) {
  StockData& this_ = static_cast<StockData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.date_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.order_verb_.Destroy();
  this_._impl_.itch_incoming_time_.Destroy();
  delete this_._impl_.change_;
  this_._impl_.~Impl_();
}

inline void* StockData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StockData(arena);
}
constexpr auto StockData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StockData),
                                            alignof(StockData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StockData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StockData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StockData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StockData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StockData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StockData>(), &StockData::ByteSizeLong,
            &StockData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StockData, _impl_._cached_size_),
        false,
    },
    &StockData::kDescriptorMethods,
    &descriptor_table_feed_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StockData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 23, 1, 81, 2> StockData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StockData, _impl_._has_bits_),
    0, // no _extensions_
    26, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4257218560,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::StockData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.symbol_)}},
    // double lastprice = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.lastprice_)}},
    // double volume = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.volume_)}},
    // double high = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.high_)}},
    // double low = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.low_)}},
    // double open = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.open_)}},
    // double frequency = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.frequency_)}},
    // double foreignbuy = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.foreignbuy_)}},
    // double foreignsell = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.foreignsell_)}},
    // string date = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.date_)}},
    // string timestamp = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.timestamp_)}},
    // double close = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.close_)}},
    // double previous = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.previous_)}},
    // double value = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.value_)}},
    // .PriceChange change = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 0, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.change_)}},
    // string order_verb = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.order_verb_)}},
    // int64 quantity = 17;
    {::_pbi::TcParser::FastV64S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.quantity_)}},
    // bool is_index = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.is_index_)}},
    // int64 sequence_number = 19;
    {::_pbi::TcParser::FastV64S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.sequence_number_)}},
    // int64 order_book_id = 20;
    {::_pbi::TcParser::FastV64S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.order_book_id_)}},
    // int64 order_number = 21;
    {::_pbi::TcParser::FastV64S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.order_number_)}},
    // int64 match_number = 22;
    {::_pbi::TcParser::FastV64S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.match_number_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string itch_incoming_time = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(StockData, _impl_.itch_incoming_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.symbol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double lastprice = 2;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.lastprice_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double volume = 3;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double high = 4;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.high_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double low = 5;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.low_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double open = 6;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.open_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double frequency = 7;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.frequency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double foreignbuy = 8;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.foreignbuy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double foreignsell = 9;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.foreignsell_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string date = 10;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timestamp = 11;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double close = 12;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.close_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double previous = 13;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.previous_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double value = 14;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .PriceChange change = 15;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.change_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string order_verb = 16;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.order_verb_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 quantity = 17;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.quantity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool is_index = 18;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.is_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 sequence_number = 19;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.sequence_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 order_book_id = 20;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.order_book_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 order_number = 21;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.order_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 match_number = 22;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.match_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string itch_incoming_time = 26;
    {PROTOBUF_FIELD_OFFSET(StockData, _impl_.itch_incoming_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PriceChange>()},
  }}, {{
    "\11\6\0\0\0\0\0\0\0\0\4\11\0\0\0\0\12\0\0\0\0\0\0\22"
    "StockData"
    "symbol"
    "date"
    "timestamp"
    "order_verb"
    "itch_incoming_time"
  }},
};

PROTOBUF_NOINLINE void StockData::Clear() {
// @@protoc_insertion_point(message_clear_start:StockData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.date_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.order_verb_.ClearToEmpty();
  _impl_.itch_incoming_time_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.change_ != nullptr);
    _impl_.change_->Clear();
  }
  ::memset(&_impl_.lastprice_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_index_) -
      reinterpret_cast<char*>(&_impl_.lastprice_)) + sizeof(_impl_.is_index_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StockData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StockData& this_ = static_cast<const StockData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StockData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StockData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:StockData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StockData.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double lastprice = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_lastprice()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_lastprice(), target);
          }

          // double volume = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_volume(), target);
          }

          // double high = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_high(), target);
          }

          // double low = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_low(), target);
          }

          // double open = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_open(), target);
          }

          // double frequency = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_frequency()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_frequency(), target);
          }

          // double foreignbuy = 8;
          if (::absl::bit_cast<::uint64_t>(this_._internal_foreignbuy()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_foreignbuy(), target);
          }

          // double foreignsell = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_foreignsell()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_foreignsell(), target);
          }

          // string date = 10;
          if (!this_._internal_date().empty()) {
            const std::string& _s = this_._internal_date();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StockData.date");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string timestamp = 11;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StockData.timestamp");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // double close = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_close(), target);
          }

          // double previous = 13;
          if (::absl::bit_cast<::uint64_t>(this_._internal_previous()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_previous(), target);
          }

          // double value = 14;
          if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                14, this_._internal_value(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .PriceChange change = 15;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.change_, this_._impl_.change_->GetCachedSize(), target,
                stream);
          }

          // string order_verb = 16;
          if (!this_._internal_order_verb().empty()) {
            const std::string& _s = this_._internal_order_verb();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StockData.order_verb");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // int64 quantity = 17;
          if (this_._internal_quantity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                17, this_._internal_quantity(), target);
          }

          // bool is_index = 18;
          if (this_._internal_is_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_is_index(), target);
          }

          // int64 sequence_number = 19;
          if (this_._internal_sequence_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                19, this_._internal_sequence_number(), target);
          }

          // int64 order_book_id = 20;
          if (this_._internal_order_book_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                20, this_._internal_order_book_id(), target);
          }

          // int64 order_number = 21;
          if (this_._internal_order_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                21, this_._internal_order_number(), target);
          }

          // int64 match_number = 22;
          if (this_._internal_match_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                22, this_._internal_match_number(), target);
          }

          // string itch_incoming_time = 26;
          if (!this_._internal_itch_incoming_time().empty()) {
            const std::string& _s = this_._internal_itch_incoming_time();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StockData.itch_incoming_time");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:StockData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StockData::ByteSizeLong(const MessageLite& base) {
          const StockData& this_ = static_cast<const StockData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StockData::ByteSizeLong() const {
          const StockData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:StockData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // string date = 10;
            if (!this_._internal_date().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_date());
            }
            // string timestamp = 11;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
            // string order_verb = 16;
            if (!this_._internal_order_verb().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_order_verb());
            }
            // string itch_incoming_time = 26;
            if (!this_._internal_itch_incoming_time().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_itch_incoming_time());
            }
          }
           {
            // .PriceChange change = 15;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.change_);
            }
          }
           {
            // double lastprice = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_lastprice()) != 0) {
              total_size += 9;
            }
            // double volume = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
              total_size += 9;
            }
            // double high = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
              total_size += 9;
            }
            // double low = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
              total_size += 9;
            }
            // double open = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
              total_size += 9;
            }
            // double frequency = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_frequency()) != 0) {
              total_size += 9;
            }
            // double foreignbuy = 8;
            if (::absl::bit_cast<::uint64_t>(this_._internal_foreignbuy()) != 0) {
              total_size += 9;
            }
            // double foreignsell = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_foreignsell()) != 0) {
              total_size += 9;
            }
            // double close = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
              total_size += 9;
            }
            // double previous = 13;
            if (::absl::bit_cast<::uint64_t>(this_._internal_previous()) != 0) {
              total_size += 9;
            }
            // double value = 14;
            if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
              total_size += 9;
            }
            // int64 quantity = 17;
            if (this_._internal_quantity() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_quantity());
            }
            // int64 sequence_number = 19;
            if (this_._internal_sequence_number() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_sequence_number());
            }
            // int64 order_book_id = 20;
            if (this_._internal_order_book_id() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_order_book_id());
            }
            // int64 order_number = 21;
            if (this_._internal_order_number() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_order_number());
            }
            // int64 match_number = 22;
            if (this_._internal_match_number() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_match_number());
            }
            // bool is_index = 18;
            if (this_._internal_is_index() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StockData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StockData*>(&to_msg);
  auto& from = static_cast<const StockData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:StockData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_date().empty()) {
    _this->_internal_set_date(from._internal_date());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_order_verb().empty()) {
    _this->_internal_set_order_verb(from._internal_order_verb());
  }
  if (!from._internal_itch_incoming_time().empty()) {
    _this->_internal_set_itch_incoming_time(from._internal_itch_incoming_time());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.change_ != nullptr);
    if (_this->_impl_.change_ == nullptr) {
      _this->_impl_.change_ =
          ::google::protobuf::Message::CopyConstruct<::PriceChange>(arena, *from._impl_.change_);
    } else {
      _this->_impl_.change_->MergeFrom(*from._impl_.change_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_lastprice()) != 0) {
    _this->_impl_.lastprice_ = from._impl_.lastprice_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_volume()) != 0) {
    _this->_impl_.volume_ = from._impl_.volume_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_high()) != 0) {
    _this->_impl_.high_ = from._impl_.high_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_low()) != 0) {
    _this->_impl_.low_ = from._impl_.low_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_open()) != 0) {
    _this->_impl_.open_ = from._impl_.open_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_frequency()) != 0) {
    _this->_impl_.frequency_ = from._impl_.frequency_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_foreignbuy()) != 0) {
    _this->_impl_.foreignbuy_ = from._impl_.foreignbuy_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_foreignsell()) != 0) {
    _this->_impl_.foreignsell_ = from._impl_.foreignsell_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_close()) != 0) {
    _this->_impl_.close_ = from._impl_.close_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_previous()) != 0) {
    _this->_impl_.previous_ = from._impl_.previous_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_value()) != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  if (from._internal_quantity() != 0) {
    _this->_impl_.quantity_ = from._impl_.quantity_;
  }
  if (from._internal_sequence_number() != 0) {
    _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
  }
  if (from._internal_order_book_id() != 0) {
    _this->_impl_.order_book_id_ = from._impl_.order_book_id_;
  }
  if (from._internal_order_number() != 0) {
    _this->_impl_.order_number_ = from._impl_.order_number_;
  }
  if (from._internal_match_number() != 0) {
    _this->_impl_.match_number_ = from._impl_.match_number_;
  }
  if (from._internal_is_index() != 0) {
    _this->_impl_.is_index_ = from._impl_.is_index_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StockData::CopyFrom(const StockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StockData::InternalSwap(StockData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.date_, &other->_impl_.date_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_verb_, &other->_impl_.order_verb_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.itch_incoming_time_, &other->_impl_.itch_incoming_time_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StockData, _impl_.is_index_)
      + sizeof(StockData::_impl_.is_index_)
      - PROTOBUF_FIELD_OFFSET(StockData, _impl_.change_)>(
          reinterpret_cast<char*>(&_impl_.change_),
          reinterpret_cast<char*>(&other->_impl_.change_));
}

::google::protobuf::Metadata StockData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PriceChange::_Internal {
 public:
};

PriceChange::PriceChange(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PriceChange)
}
PriceChange::PriceChange(
    ::google::protobuf::Arena* arena, const PriceChange& from)
    : PriceChange(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PriceChange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PriceChange::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           0,
           offsetof(Impl_, percentage_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::percentage_));
}
PriceChange::~PriceChange() {
  // @@protoc_insertion_point(destructor:PriceChange)
  SharedDtor(*this);
}
inline void PriceChange::SharedDtor(MessageLite& self) {
  PriceChange& this_ = static_cast<PriceChange&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PriceChange::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PriceChange(arena);
}
constexpr auto PriceChange::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PriceChange),
                                            alignof(PriceChange));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PriceChange::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PriceChange_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PriceChange::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PriceChange>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PriceChange::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PriceChange>(), &PriceChange::ByteSizeLong,
            &PriceChange::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PriceChange, _impl_._cached_size_),
        false,
    },
    &PriceChange::kDescriptorMethods,
    &descriptor_table_feed_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PriceChange::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PriceChange::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::PriceChange>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double percentage = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(PriceChange, _impl_.percentage_)}},
    // double value = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(PriceChange, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double value = 1;
    {PROTOBUF_FIELD_OFFSET(PriceChange, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double percentage = 2;
    {PROTOBUF_FIELD_OFFSET(PriceChange, _impl_.percentage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PriceChange::Clear() {
// @@protoc_insertion_point(message_clear_start:PriceChange)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.percentage_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.percentage_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PriceChange::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PriceChange& this_ = static_cast<const PriceChange&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PriceChange::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PriceChange& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:PriceChange)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double value = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_value(), target);
          }

          // double percentage = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_percentage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_percentage(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:PriceChange)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PriceChange::ByteSizeLong(const MessageLite& base) {
          const PriceChange& this_ = static_cast<const PriceChange&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PriceChange::ByteSizeLong() const {
          const PriceChange& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:PriceChange)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double value = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
              total_size += 9;
            }
            // double percentage = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_percentage()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PriceChange::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PriceChange*>(&to_msg);
  auto& from = static_cast<const PriceChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PriceChange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_value()) != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_percentage()) != 0) {
    _this->_impl_.percentage_ = from._impl_.percentage_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PriceChange::CopyFrom(const PriceChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PriceChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PriceChange::InternalSwap(PriceChange* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceChange, _impl_.percentage_)
      + sizeof(PriceChange::_impl_.percentage_)
      - PROTOBUF_FIELD_OFFSET(PriceChange, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata PriceChange::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_feed_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
