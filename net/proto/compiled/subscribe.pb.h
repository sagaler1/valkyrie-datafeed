// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: subscribe.proto
// Protobuf C++ Version: 5.29.5

#ifndef subscribe_2eproto_2epb_2eh
#define subscribe_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_subscribe_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_subscribe_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_subscribe_2eproto;
class LiveFeedSub;
struct LiveFeedSubDefaultTypeInternal;
extern LiveFeedSubDefaultTypeInternal _LiveFeedSub_default_instance_;
class SymbolSubscribe;
struct SymbolSubscribeDefaultTypeInternal;
extern SymbolSubscribeDefaultTypeInternal _SymbolSubscribe_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class LiveFeedSub final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LiveFeedSub) */ {
 public:
  inline LiveFeedSub() : LiveFeedSub(nullptr) {}
  ~LiveFeedSub() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LiveFeedSub* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LiveFeedSub));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LiveFeedSub(
      ::google::protobuf::internal::ConstantInitialized);

  inline LiveFeedSub(const LiveFeedSub& from) : LiveFeedSub(nullptr, from) {}
  inline LiveFeedSub(LiveFeedSub&& from) noexcept
      : LiveFeedSub(nullptr, std::move(from)) {}
  inline LiveFeedSub& operator=(const LiveFeedSub& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiveFeedSub& operator=(LiveFeedSub&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiveFeedSub& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiveFeedSub* internal_default_instance() {
    return reinterpret_cast<const LiveFeedSub*>(
        &_LiveFeedSub_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LiveFeedSub& a, LiveFeedSub& b) { a.Swap(&b); }
  inline void Swap(LiveFeedSub* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiveFeedSub* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiveFeedSub* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LiveFeedSub>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LiveFeedSub& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LiveFeedSub& from) { LiveFeedSub::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LiveFeedSub* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "LiveFeedSub"; }

 protected:
  explicit LiveFeedSub(::google::protobuf::Arena* arena);
  LiveFeedSub(::google::protobuf::Arena* arena, const LiveFeedSub& from);
  LiveFeedSub(::google::protobuf::Arena* arena, LiveFeedSub&& from) noexcept
      : LiveFeedSub(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLivequoteFieldNumber = 6,
  };
  // repeated string livequote = 6;
  int livequote_size() const;
  private:
  int _internal_livequote_size() const;

  public:
  void clear_livequote() ;
  const std::string& livequote(int index) const;
  std::string* mutable_livequote(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_livequote(int index, Arg_&& value, Args_... args);
  std::string* add_livequote();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_livequote(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& livequote() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_livequote();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_livequote() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_livequote();

  public:
  // @@protoc_insertion_point(class_scope:LiveFeedSub)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LiveFeedSub& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> livequote_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscribe_2eproto;
};
// -------------------------------------------------------------------

class SymbolSubscribe final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SymbolSubscribe) */ {
 public:
  inline SymbolSubscribe() : SymbolSubscribe(nullptr) {}
  ~SymbolSubscribe() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SymbolSubscribe* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SymbolSubscribe));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SymbolSubscribe(
      ::google::protobuf::internal::ConstantInitialized);

  inline SymbolSubscribe(const SymbolSubscribe& from) : SymbolSubscribe(nullptr, from) {}
  inline SymbolSubscribe(SymbolSubscribe&& from) noexcept
      : SymbolSubscribe(nullptr, std::move(from)) {}
  inline SymbolSubscribe& operator=(const SymbolSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolSubscribe& operator=(SymbolSubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymbolSubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolSubscribe* internal_default_instance() {
    return reinterpret_cast<const SymbolSubscribe*>(
        &_SymbolSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SymbolSubscribe& a, SymbolSubscribe& b) { a.Swap(&b); }
  inline void Swap(SymbolSubscribe* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolSubscribe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolSubscribe* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SymbolSubscribe>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymbolSubscribe& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SymbolSubscribe& from) { SymbolSubscribe::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SymbolSubscribe* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SymbolSubscribe"; }

 protected:
  explicit SymbolSubscribe(::google::protobuf::Arena* arena);
  SymbolSubscribe(::google::protobuf::Arena* arena, const SymbolSubscribe& from);
  SymbolSubscribe(::google::protobuf::Arena* arena, SymbolSubscribe&& from) noexcept
      : SymbolSubscribe(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kKeyFieldNumber = 3,
    kSubsFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string key = 3;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // .LiveFeedSub subs = 2;
  bool has_subs() const;
  void clear_subs() ;
  const ::LiveFeedSub& subs() const;
  PROTOBUF_NODISCARD ::LiveFeedSub* release_subs();
  ::LiveFeedSub* mutable_subs();
  void set_allocated_subs(::LiveFeedSub* value);
  void unsafe_arena_set_allocated_subs(::LiveFeedSub* value);
  ::LiveFeedSub* unsafe_arena_release_subs();

  private:
  const ::LiveFeedSub& _internal_subs() const;
  ::LiveFeedSub* _internal_mutable_subs();

  public:
  // @@protoc_insertion_point(class_scope:SymbolSubscribe)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SymbolSubscribe& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::LiveFeedSub* subs_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscribe_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LiveFeedSub

// repeated string livequote = 6;
inline int LiveFeedSub::_internal_livequote_size() const {
  return _internal_livequote().size();
}
inline int LiveFeedSub::livequote_size() const {
  return _internal_livequote_size();
}
inline void LiveFeedSub::clear_livequote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.livequote_.Clear();
}
inline std::string* LiveFeedSub::add_livequote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_livequote()->Add();
  // @@protoc_insertion_point(field_add_mutable:LiveFeedSub.livequote)
  return _s;
}
inline const std::string& LiveFeedSub::livequote(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiveFeedSub.livequote)
  return _internal_livequote().Get(index);
}
inline std::string* LiveFeedSub::mutable_livequote(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:LiveFeedSub.livequote)
  return _internal_mutable_livequote()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void LiveFeedSub::set_livequote(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_livequote()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:LiveFeedSub.livequote)
}
template <typename Arg_, typename... Args_>
inline void LiveFeedSub::add_livequote(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_livequote(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:LiveFeedSub.livequote)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LiveFeedSub::livequote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:LiveFeedSub.livequote)
  return _internal_livequote();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LiveFeedSub::mutable_livequote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:LiveFeedSub.livequote)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_livequote();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LiveFeedSub::_internal_livequote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.livequote_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LiveFeedSub::_internal_mutable_livequote() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.livequote_;
}

// -------------------------------------------------------------------

// SymbolSubscribe

// string userId = 1;
inline void SymbolSubscribe::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& SymbolSubscribe::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SymbolSubscribe.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolSubscribe::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SymbolSubscribe.userId)
}
inline std::string* SymbolSubscribe::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:SymbolSubscribe.userId)
  return _s;
}
inline const std::string& SymbolSubscribe::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void SymbolSubscribe::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* SymbolSubscribe::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* SymbolSubscribe::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SymbolSubscribe.userId)
  return _impl_.userid_.Release();
}
inline void SymbolSubscribe::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SymbolSubscribe.userId)
}

// .LiveFeedSub subs = 2;
inline bool SymbolSubscribe::has_subs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subs_ != nullptr);
  return value;
}
inline void SymbolSubscribe::clear_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subs_ != nullptr) _impl_.subs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::LiveFeedSub& SymbolSubscribe::_internal_subs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::LiveFeedSub* p = _impl_.subs_;
  return p != nullptr ? *p : reinterpret_cast<const ::LiveFeedSub&>(::_LiveFeedSub_default_instance_);
}
inline const ::LiveFeedSub& SymbolSubscribe::subs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SymbolSubscribe.subs)
  return _internal_subs();
}
inline void SymbolSubscribe::unsafe_arena_set_allocated_subs(::LiveFeedSub* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subs_);
  }
  _impl_.subs_ = reinterpret_cast<::LiveFeedSub*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SymbolSubscribe.subs)
}
inline ::LiveFeedSub* SymbolSubscribe::release_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::LiveFeedSub* released = _impl_.subs_;
  _impl_.subs_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::LiveFeedSub* SymbolSubscribe::unsafe_arena_release_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SymbolSubscribe.subs)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::LiveFeedSub* temp = _impl_.subs_;
  _impl_.subs_ = nullptr;
  return temp;
}
inline ::LiveFeedSub* SymbolSubscribe::_internal_mutable_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subs_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::LiveFeedSub>(GetArena());
    _impl_.subs_ = reinterpret_cast<::LiveFeedSub*>(p);
  }
  return _impl_.subs_;
}
inline ::LiveFeedSub* SymbolSubscribe::mutable_subs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::LiveFeedSub* _msg = _internal_mutable_subs();
  // @@protoc_insertion_point(field_mutable:SymbolSubscribe.subs)
  return _msg;
}
inline void SymbolSubscribe::set_allocated_subs(::LiveFeedSub* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subs_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subs_ = reinterpret_cast<::LiveFeedSub*>(value);
  // @@protoc_insertion_point(field_set_allocated:SymbolSubscribe.subs)
}

// string key = 3;
inline void SymbolSubscribe::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SymbolSubscribe::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SymbolSubscribe.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolSubscribe::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SymbolSubscribe.key)
}
inline std::string* SymbolSubscribe::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:SymbolSubscribe.key)
  return _s;
}
inline const std::string& SymbolSubscribe::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void SymbolSubscribe::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* SymbolSubscribe::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* SymbolSubscribe::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SymbolSubscribe.key)
  return _impl_.key_.Release();
}
inline void SymbolSubscribe::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SymbolSubscribe.key)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // subscribe_2eproto_2epb_2eh
